<S> : <PROGRAM>;
<PROGRAM> : [eof];
<PROGRAM> : <STATEMENT_LIST>;
<STATEMENT_LIST> : <STATEMENT_LIST> <STATEMENT>;
<STATEMENT_LIST> : <STATEMENT>;
<STATEMENT> : <IMPORT_STATEMENT>;
<STATEMENT> : <IF_STATEMENT>;
<STATEMENT> : <VARIABLE_DECLARATION>;
<STATEMENT> : <CONSTANT_DECLARATION>;
<STATEMENT> : <BLOCK_STATEMENT>;
<STATEMENT> : <RETURN_STATEMENT>;
<STATEMENT> : <TRY_CATCH_STATEMENT>;
<STATEMENT> : <THROW_STATEMENT>;
<STATEMENT> : <SWITCH_STATEMENT>;
<STATEMENT> : <LOOP_STATEMENT>;
<STATEMENT> : <EXPRESSION_STATEMENT>;
<STATEMENT> : <OBJECT_TYPE_DECLARATION>;
<IMPORT_STATEMENT> : [import] [string_literal] [semicolon];
<IF_STATEMENT> : [if] [l_paren] <EXPRESSION> [r_paren] <STATEMENT> <ELSE_IF_STATEMENTS> [else] <STATEMENT>;
<IF_STATEMENT> : [if] [l_paren] <EXPRESSION> [r_paren] <STATEMENT> <ELSE_IF_STATEMENTS>;
<IF_STATEMENT> : [if] [l_paren] <EXPRESSION> [r_paren] <STATEMENT> [else] <STATEMENT>;
<IF_STATEMENT> : [if] [l_paren] <EXPRESSION> [r_paren] <STATEMENT>;
<ELSE_IF_STATEMENTS> : <ELSE_IF_STATEMENTS> <ELSE_IF_STATEMENT>;
<ELSE_IF_STATEMENTS> : <ELSE_IF_STATEMENT>;
<ELSE_IF_STATEMENT> : [elif] [l_paren] <EXPRESSION> [r_paren] <STATEMENT>;
<VARIABLE_DECLARATION> : <VARAIBLE_DECLARATION_HEADER> [semicolon];
<VARIABLE_DECLARATION> : <VARAIBLE_DECLARATION_HEADER> [equals] <EXPRESSION> [semicolon];
<VARAIBLE_DECLARATION_HEADER> : [var] [identifier] [colon] <TYPE>;
<CONSTANT_DECLARATION> : [const] [identifier] [colon] <TYPE> [equals] <EXPRESSION> [semicolon];
<BLOCK_STATEMENT> : [l_curly_brace] [r_curly_brace];
<BLOCK_STATEMENT> : [l_curly_brace] <STATEMENT_LIST> [r_curly_brace];
<RETURN_STATEMENT> : [return] <EXPRESSION> [semicolon];
<RETURN_STATEMENT> : [return] [semicolon];
<TRY_CATCH_STATEMENT> : [try] <BLOCK_STATEMENT> [catch] [l_paren] [identifier] [r_paren] <BLOCK_STATEMENT>;
<THROW_STATEMENT> : [throw] [string_literal] [semicolon];
<SWITCH_STATEMENT> : [switch] [l_paren] <EXPRESSION> [r_paren] [l_curly_brace] <SWITCH_CASE_LIST_WITH_DEFAULT> [r_curly_brace];
<SWITCH_STATEMENT> : [switch] [l_paren] <EXPRESSION> [r_paren] [l_curly_brace] [r_curly_brace];
<SWITCH_CASE_LIST_WITH_DEFAULT> : <SWITCH_CASE_LIST> [default] [colon] <SWITCH_BODY>;
<SWITCH_CASE_LIST_WITH_DEFAULT> : [default] [colon] <SWITCH_BODY>;
<SWITCH_CASE_LIST_WITH_DEFAULT> : <SWITCH_CASE_LIST>;
<SWITCH_CASE_LIST> : <SWITCH_CASE_LIST> <SWITCH_CASE>;
<SWITCH_CASE_LIST> : <SWITCH_CASE>;
<SWITCH_CASE> : [case] [l_paren] [string_literal] [r_paren] [colon] <SWITCH_BODY>;
<SWITCH_CASE> : [case] [l_paren] [number_literal] [r_paren] [colon] <SWITCH_BODY>;
<SWITCH_BODY> : [l_curly_brace] <SWITCH_BODY_STATEMENT_LIST> [r_curly_brace];
<SWITCH_BODY> : [l_curly_brace] [r_curly_brace];
<SWITCH_BODY_STATEMENT_LIST> : <SWITCH_BODY_STATEMENT_LIST> <SWITCH_BODY_STATEMENT>;
<SWITCH_BODY_STATEMENT_LIST> : <SWITCH_BODY_STATEMENT>;
<SWITCH_BODY_STATEMENT> : <STATEMENT>;
<SWITCH_BODY_STATEMENT> : [switch_break] [semicolon];
<SWITCH_BODY_STATEMENT> : [goto] [string_literal] [semicolon];
<SWITCH_BODY_STATEMENT> : [goto] [number_literal] [semicolon];
<LOOP_STATEMENT> : <FOREACH_LOOP>;
<LOOP_STATEMENT> : <COUNTER_CONTROLLED_LOOP>;
<LOOP_STATEMENT> : <WHILE_LOOP>;
<FOREACH_LOOP> : [for] [l_paren] [var] [identifier] [colon] <TYPE> [of] <EXPRESSION> [r_paren] <LOOP_BODY>;
<COUNTER_CONTROLLED_LOOP> : [for] [l_paren] <COUNTER_LOOP_INIT> [semicolon] <EXPRESSION> [semicolon] <EXPRESSION_LIST> [r_paren] <LOOP_BODY>;
<COUNTER_CONTROLLED_LOOP> : [for] [l_paren] [semicolon] <EXPRESSION> [semicolon] <EXPRESSION_LIST> [r_paren] <LOOP_BODY>;
<COUNTER_CONTROLLED_LOOP> : [for] [l_paren] <COUNTER_LOOP_INIT> [semicolon] [semicolon] <EXPRESSION_LIST> [r_paren] <LOOP_BODY>;
<COUNTER_CONTROLLED_LOOP> : [for] [l_paren] <COUNTER_LOOP_INIT> [semicolon] <EXPRESSION> [semicolon] [r_paren] <LOOP_BODY>;
<COUNTER_CONTROLLED_LOOP> : [for] [l_paren] [semicolon] [semicolon] <EXPRESSION_LIST> [r_paren] <LOOP_BODY>;
<COUNTER_CONTROLLED_LOOP> : [for] [l_paren] <COUNTER_LOOP_INIT> [semicolon] [semicolon] [r_paren] <LOOP_BODY>;
<COUNTER_CONTROLLED_LOOP> : [for] [l_paren] [semicolon] <EXPRESSION> [semicolon] [r_paren] <LOOP_BODY>;
<COUNTER_LOOP_INIT> : <VARIABLE_DECLARATION> [comma] <COUNTER_LOOP_INIT>;
<COUNTER_LOOP_INIT> : <VARIABLE_DECLARATION>;
<EXPRESSION_LIST> : <EXPRESSION> [comma] <EXPRESSION_LIST>;
<EXPRESSION_LIST> : <EXPRESSION>;
<WHILE_LOOP> : [while] [l_paren] <EXPRESSION> [r_paren] <LOOP_BODY>;
<WHILE_LOOP> : [while] [l_paren] [r_paren] <LOOP_BODY>;
<LOOP_BODY> : [l_curly_brace] [r_curly_brace];
<LOOP_BODY> : [l_curly_brace] <LOOP_BODY_STATEMENT_LIST> [r_curly_brace];
<LOOP_BODY_STATEMENT_LIST> : <LOOP_BODY_STATEMENT_LIST> <LOOP_BODY_STATEMENT>;
<LOOP_BODY_STATEMENT_LIST> : <LOOP_BODY_STATEMENT>;
<LOOP_BODY_STATEMENT> : <STATEMENT>;
<LOOP_BODY_STATEMENT> : [loop_break] [semicolon];
<LOOP_BODY_STATEMENT> : [continue] [semicolon];
<EXPRESSION_STATEMENT> : <EXPRESSION> [semicolon];
<EXPRESSION> : <FUNCTION_EXPRESSION>;
<EXPRESSION> : <ARRAY_LITERAL>;
<EXPRESSION> : <OBJECT_LITERAL>;
<EXPRESSION> : <LOGICAL_EXPRESSION>;
<FUNCTION_EXPRESSION> : [function] [l_paren] <PARAMETER_LIST> [r_paren] [close] <TYPE> [minus_r_angle_bar] <BLOCK_STATEMENT>;
<FUNCTION_EXPRESSION> : [function] [l_paren] [r_paren] [close] <TYPE> [minus_r_angle_bar] <BLOCK_STATEMENT>;
<PARAMETER_LIST> : <VARAIBLE_DECLARATION_HEADER> [comma] <PARAMETER_LIST>;
<PARAMETER_LIST> : <VARAIBLE_DECLARATION_HEADER>;
<ARRAY_LITERAL> : [l_brace] <EXPRESSION_LIST> [r_brace];
<ARRAY_LITERAL> : [l_brace] [r_brace];
<OBJECT_LITERAL> : [l_curly_brace] <OBJECT_LITERAL_FIELD_LIST> [r_curly_brace];
<OBJECT_LITERAL> : [l_curly_brace] [r_curly_brace];
<OBJECT_LITERAL_FIELD_LIST> : <OBJECT_LITERAL_FIELD> [comma] <OBJECT_LITERAL_FIELD_LIST>;
<OBJECT_LITERAL_FIELD_LIST> : <OBJECT_LITERAL_FIELD>;
<OBJECT_LITERAL_FIELD> : [identifier] [colon] <EXPRESSION>;
<LOGICAL_EXPRESSION> : <LOGICAL_EXPRESSION> [double_ampersand] <BITWISE_EXPRESSION>;
<LOGICAL_EXPRESSION> : <LOGICAL_EXPRESSION> [double_pipe] <BITWISE_EXPRESSION>;
<LOGICAL_EXPRESSION> : <BITWISE_EXPRESSION>;
<BITWISE_EXPRESSION> : <BITWISE_EXPRESSION> [carat] <EQUALITY_EXPRESSION>;
<BITWISE_EXPRESSION> : <BITWISE_EXPRESSION> [ampersand] <EQUALITY_EXPRESSION>;
<BITWISE_EXPRESSION> : <BITWISE_EXPRESSION> [pipe] <EQUALITY_EXPRESSION>;
<BITWISE_EXPRESSION> : <EQUALITY_EXPRESSION>;
<EQUALITY_EXPRESSION> : <RELATIONAL_EXPRESSION> [double_equals] <RELATIONAL_EXPRESSION>;
<EQUALITY_EXPRESSION> : <RELATIONAL_EXPRESSION> [exclamation_equals] <RELATIONAL_EXPRESSION>;
<EQUALITY_EXPRESSION> : <RELATIONAL_EXPRESSION>;
<RELATIONAL_EXPRESSION> : <SHIFT_EXPRESSION> [l_angle_bar] <SHIFT_EXPRESSION>;
<RELATIONAL_EXPRESSION> : <SHIFT_EXPRESSION> [l_angle_bar_equals] <SHIFT_EXPRESSION>;
<RELATIONAL_EXPRESSION> : <SHIFT_EXPRESSION> [r_angle_bar] <SHIFT_EXPRESSION>;
<RELATIONAL_EXPRESSION> : <SHIFT_EXPRESSION> [r_angle_bar_equals] <SHIFT_EXPRESSION>;
<RELATIONAL_EXPRESSION> : <SHIFT_EXPRESSION>;
<SHIFT_EXPRESSION> : <SHIFT_EXPRESSION> [double_l_angle_bar] <TERM_EXPRESSION>;
<SHIFT_EXPRESSION> : <SHIFT_EXPRESSION> [double_r_angle_bar] <TERM_EXPRESSION>;
<SHIFT_EXPRESSION> : <TERM_EXPRESSION>;
<TERM_EXPRESSION> : <TERM_EXPRESSION> [plus] <FACTOR_EXPRESSION>;
<TERM_EXPRESSION> : <TERM_EXPRESSION> [minus] <FACTOR_EXPRESSION>;
<TERM_EXPRESSION> : <FACTOR_EXPRESSION>;
<FACTOR_EXPRESSION> : <FACTOR_EXPRESSION> [star] <UNARY_EXPRESSION>;
<FACTOR_EXPRESSION> : <FACTOR_EXPRESSION> [forward_slash] <UNARY_EXPRESSION>;
<FACTOR_EXPRESSION> : <FACTOR_EXPRESSION> [percent] <UNARY_EXPRESSION>;
<FACTOR_EXPRESSION> : <UNARY_EXPRESSION>;
<UNARY_EXPRESSION> : [minus] <EXPONENTIATION_EXPRESSION>;
<UNARY_EXPRESSION> : [exclamation] <EXPONENTIATION_EXPRESSION>;
<UNARY_EXPRESSION> : <EXPONENTIATION_EXPRESSION>;
<EXPONENTIATION_EXPRESSION> : <ENDPOINT> [double_star] <EXPONENTIATION_EXPRESSION>;
<EXPONENTIATION_EXPRESSION> : <ENDPOINT>;
<ENDPOINT> : <ASSIGNMENT_EXPRESSION>;
<ENDPOINT> : <IDENTIFIER_STACK_EXPRESSION>;
<ENDPOINT> : <LITERAL>;
<ENDPOINT> : <GROUPING_EXPRESSION>;
<ASSIGNMENT_EXPRESSION> : <ASSIGNABLE_TARGET_EXPRESSION> [double_plus];
<ASSIGNMENT_EXPRESSION> : <ASSIGNABLE_TARGET_EXPRESSION> [double_minus];
<ASSIGNMENT_EXPRESSION> : [double_plus] <ASSIGNABLE_TARGET_EXPRESSION>;
<ASSIGNMENT_EXPRESSION> : [double_minus] <ASSIGNABLE_TARGET_EXPRESSION>;
<ASSIGNMENT_EXPRESSION> : <ASSIGNABLE_TARGET_EXPRESSION> [equals] <EXPRESSION>;
<ASSIGNABLE_TARGET_EXPRESSION> : [identifier];
<ASSIGNABLE_TARGET_EXPRESSION> : <ASSIGNABLE_TARGET_EXPRESSION> [dot] [identifier];
<ASSIGNABLE_TARGET_EXPRESSION> : <ASSIGNABLE_TARGET_EXPRESSION> [l_paren] <EXPRESSION_LIST> [r_paren] [dot] [identifier];
<ASSIGNABLE_TARGET_EXPRESSION> : <ASSIGNABLE_TARGET_EXPRESSION> [l_brace] <EXPRESSION> [r_brace];
<ASSIGNABLE_TARGET_EXPRESSION> : <ASSIGNABLE_TARGET_EXPRESSION> [l_paren] <EXPRESSION_LIST> [r_paren] [l_brace] <EXPRESSION> [r_brace];
<IDENTIFIER_STACK_EXPRESSION> : [identifier];
<IDENTIFIER_STACK_EXPRESSION> : <IDENTIFIER_STACK_EXPRESSION> [dot] [identifier];
<IDENTIFIER_STACK_EXPRESSION> : <IDENTIFIER_STACK_EXPRESSION> [l_brace] <EXPRESSION> [r_brace];
<IDENTIFIER_STACK_EXPRESSION> : <IDENTIFIER_STACK_EXPRESSION> [l_paren] <EXPRESSION_LIST> [r_paren];
<LITERAL> : [string_literal];
<LITERAL> : [number_literal];
<LITERAL> : [boolean_literal];
<LITERAL> : [null_literal];
<GROUPING_EXPRESSION> : [l_paren] <EXPRESSION> [r_paren];
<OBJECT_TYPE_DECLARATION> : [object] [identifier] [l_curly_brace] <PROPERTY_LIST> [r_curly_brace];
<OBJECT_TYPE_DECLARATION> : [object] [identifier] [l_curly_brace] [r_curly_brace];
<PROPERTY_LIST> : <PROPERTY_LIST> <PROPERTY_DEFINITION>;
<PROPERTY_LIST> : <PROPERTY_DEFINITION>;
<PROPERTY_DEFINITION> : [identifier] [colon] <TYPE> [semicolon];
<TYPE> : <TYPE>[];
<TYPE> : [number_type];
<TYPE> : [boolean_type];
<TYPE> : [string_type];
<TYPE> : [void_type];
<TYPE> : [build] [identifier];
<TYPE> : <LAMBDA_TYPE>;
<LAMBDA_TYPE> : [function] [l_paren] <LAMBDA_PARAMETER_LIST> [r_paren] [minus_r_angle_bar] <TYPE>;
<LAMBDA_TYPE> : [function] [l_paren] [r_paren] [minus_r_angle_bar] <TYPE>;
<LAMBDA_PARAMETER_LIST> : <TYPE> [comma] <LAMBDA_PARAMETER_LIST>;
<LAMBDA_PARAMETER_LIST> : <TYPE>;